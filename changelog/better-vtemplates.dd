Template usage diagnostics via `-vtemplates` has been improved.

Every template having at least one instantiation is now printed using standard
compiler diagnostics formatting for easy navigation to the point of its
declaration.

All messages of this kind are sorted by descending unique instantiation count.

If the flag argument `list-instances` is passed (such as `-vtemplates=list-instances`),
each location where a template was instantiated is printed along with the reason for
the instantiation (implicit or explicit).

For instance, a D source file named `main.d` containing

---
void foo(int I)() { }
void goo1(int I)() { }
void goo2(int I)() { goo1!(I); }

void test()
{
    foo!(1)();
    foo!(1)();
    foo!(2)();

    goo1!(1)();

    goo2!(1)();
}
---

compiled with `-vtemplates=list-instances` will output

---
main.d(1): vtemplate: 3 (2 unique) instantiation(s) of template `foo(int I)()` found, they are:
main.d(7): vtemplate: explicit instance `foo!1`
main.d(8): vtemplate: explicit instance `foo!1`
main.d(9): vtemplate: explicit instance `foo!2`
main.d(2): vtemplate: 2 (1 unique) instantiation(s) of template `goo1(int I)()` found, they are:
main.d(11): vtemplate: explicit instance `goo1!1`
main.d(3): vtemplate: implicit instance `goo1!1`
main.d(3): vtemplate: 1 (1 unique) instantiation(s) of template `goo2(int I)()` found, they are:
main.d(13): vtemplate: explicit instance `goo2!1`
---
